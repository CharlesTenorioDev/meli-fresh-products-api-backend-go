// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Bootcampers GO - W5"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/buyers": {
            "get": {
                "description": "Retrieve all buyers from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Get all buyers",
                "responses": {
                    "200": {
                        "description": "List of all buyers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new buyer to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Create a new buyer",
                "parameters": [
                    {
                        "description": "Buyer data",
                        "name": "buyer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Buyer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created buyer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "buyer with given card number already registered",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Failed to create buyer",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/buyers/report-purchase-orders": {
            "get": {
                "description": "Generate a report of purchase orders for a specific buyer or all buyers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Get purchase orders by buyer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer Id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "failed to parse id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/buyers/{id}": {
            "get": {
                "description": "Retrieve a specific buyer from the database using their Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Get a buyer by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Buyer data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Failed to parse Id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a specific buyer from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Delete a buyer by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Failed to parse Id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update the details of an existing buyer in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buyers"
                ],
                "summary": "Update a buyer's information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Buyer patch data",
                        "name": "buyer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.BuyerPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated buyer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Failed to parse id\" or \"Failed to parse body",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "buyer with given card number already registered",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/carries": {
            "get": {
                "description": "Retrieve a list of all carries from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carries"
                ],
                "summary": "Get all carries",
                "responses": {
                    "200": {
                        "description": "List of all carries",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "failed to fetch carries",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new carry in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carries"
                ],
                "summary": "Create a new carry",
                "parameters": [
                    {
                        "description": "Carry data",
                        "name": "carry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Carries"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created carry with Id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Failed to parse body",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "carry with this cid already exists\" or \"there's no such locality id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/employees": {
            "get": {
                "description": "Retrieve a list of all employees from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get all employees",
                "responses": {
                    "200": {
                        "description": "List of all employees",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new employee record in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Create a new employee",
                "parameters": [
                    {
                        "description": "Employee data",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Employee"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created employee",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid body format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Card number id already in use\" or \"Employee already in use",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "Invalid entity data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/employees/report-inbound-orders": {
            "get": {
                "description": "Retrieve the count all inbound orders per employee, or for a specific employee if Id is provided",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get inbound orders for employees",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of inbound orders per employee",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Id should be a number",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch inbound orders",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/employees/{id}": {
            "get": {
                "description": "Retrieve a specific employee by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get an employee by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid Id format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an employee record from the database by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Delete an employee by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid Id format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Update the details of an existing employee by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Update an existing employee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Employee data",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated employee",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid Id format\" or \"Invalid body format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Card number id already in use\" or \"Conflict in employee",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/inbound-orders": {
            "get": {
                "description": "Retrieve a list of all inbound orders from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InboundOrders"
                ],
                "summary": "Get all inbound orders",
                "responses": {
                    "200": {
                        "description": "List of inbound orders",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch inbounds orders",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new inbound order with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "InboundOrders"
                ],
                "summary": "Create a new inbound order",
                "parameters": [
                    {
                        "description": "Inbound order data",
                        "name": "inbound",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.InboundOrders"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created inbound order with ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid body format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Order number already exists\" or \"Employee not exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "Required fields are missing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/localities": {
            "post": {
                "description": "Save a new locality on the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locality"
                ],
                "summary": "Save a locality",
                "parameters": [
                    {
                        "description": "Locality data",
                        "name": "locality",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LocalityPostJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Saved locality data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Locality inputs are Invalid",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Locality conflict",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/localities/report-carries": {
            "get": {
                "description": "Report the total number of carries for every locality or a specific one by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locality"
                ],
                "summary": "Report carries count per locality",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int",
                        "description": "Locality ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Carries report data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Id should be a number",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Not carries on locality_id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch carries",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/localities/report-sellers": {
            "get": {
                "description": "Report the sellers count for every locality or a specific one by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locality"
                ],
                "summary": "Report sellers count per locality",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int",
                        "description": "Locality ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sellers count report data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Id should be a number",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Locality not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/productRecords": {
            "post": {
                "description": "Creates a new product record with details on the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductRecords"
                ],
                "summary": "Create a product record",
                "parameters": [
                    {
                        "description": "Product Record Data",
                        "name": "product_record",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.ProductRecords"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created product record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Error ID doesn't exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/product_batches": {
            "post": {
                "description": "Create a new product batch on the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductBatch"
                ],
                "summary": "Create a new product batch",
                "parameters": [
                    {
                        "description": "Product batch details",
                        "name": "product_batch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RequestProductBatchJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created product batch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Product-batch with given product-batch number already registered\" or \"Product-batch already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Couldn't parse product-batch",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/product_batches/{id}": {
            "get": {
                "description": "Fetch the details of a product batch using its unique Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductBatch"
                ],
                "summary": "Get product batch by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Batch ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product batch data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid Id format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Product-batch not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "description": "Retrieves a list of all products in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "List of all products",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new product to the system with the provided details in the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Product"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller or Product Type not exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Product code already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/products/report-records": {
            "get": {
                "description": "Retrieves records of products, or a specific record by product Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product records",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid Id",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/products/{id}": {
            "get": {
                "description": "Retrieves a single product by its Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid Id format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a product by its Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid Id format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing product's data in the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated product",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller or Product Type not exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Product code already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "All fields must be valid and filled",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/purchase-orders": {
            "post": {
                "description": "Handles the creation of a new purchase order to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PurchaseOrder"
                ],
                "summary": "Create a new purchase order",
                "parameters": [
                    {
                        "description": "Purchase Order Create Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.PurchaseOrderCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Purchase Order",
                        "schema": {
                            "$ref": "#/definitions/handler.PurchaseOrderJSON"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Product records or Buyer not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Purchase order number already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Purchase Order inputs are Invalid",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/sections": {
            "get": {
                "description": "Fetches all sections available in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Retrieve all sections",
                "responses": {
                    "200": {
                        "description": "List of sections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal.Section"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new section with the provided details on the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Create a new section",
                "parameters": [
                    {
                        "description": "Section Create Request",
                        "name": "section",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RequestSectionJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Section",
                        "schema": {
                            "$ref": "#/definitions/internal.Section"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Section with given section number already registered\" or \"Warehouse not found\" or \"Product-type not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Couldn't parse section",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/sections/report-products": {
            "get": {
                "description": "Fetches a report of products available in a section or across all sections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Retrieve a report of products in a section",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Section ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report of products in sections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.ResponseReportProd"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Section not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/sections/{id}": {
            "get": {
                "description": "Fetches the section based on the provided section ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Retrieve a section by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Section ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Section data",
                        "schema": {
                            "$ref": "#/definitions/internal.Section"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Section not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a section identified by its Id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Delete a section",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Section ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Section not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a section with the provided Id and data on the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Section"
                ],
                "summary": "Update an existing section",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Section ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated section data",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Section",
                        "schema": {
                            "$ref": "#/definitions/internal.Section"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Section not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Section with given section number already registered",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/sellers": {
            "get": {
                "description": "Fetches a list of all sellers in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Retrieve all sellers",
                "responses": {
                    "200": {
                        "description": "List of sellers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.SellersGetJSON"
                            }
                        }
                    },
                    "404": {
                        "description": "Sellers not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new seller to the system with the provided details on the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Create a new seller",
                "parameters": [
                    {
                        "description": "Seller Create Request",
                        "name": "seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SellersPostJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Seller Id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller not found\" or \"Locality not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Seller already exists\" or \"Seller with this CID already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/sellers/{id}": {
            "get": {
                "description": "Fetches a seller's details based on the provided ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Retrieve a seller by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seller data",
                        "schema": {
                            "$ref": "#/definitions/handler.SellersGetJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller Not Found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a seller from the system based on the provided Id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Delete a seller",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify the information of an existing seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seller"
                ],
                "summary": "Update seller details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seller Update Request",
                        "name": "seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SellersUpdateJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Seller data",
                        "schema": {
                            "$ref": "#/definitions/handler.SellersGetJSON"
                        }
                    },
                    "400": {
                        "description": "Seller invalid fields",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Seller not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Seller with this CID already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/warehouses": {
            "get": {
                "description": "Retrieve a list of all warehouses in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouse"
                ],
                "summary": "Get all warehouses",
                "responses": {
                    "200": {
                        "description": "List of all warehouses",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new warehouse to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouse"
                ],
                "summary": "Create a new warehouse",
                "parameters": [
                    {
                        "description": "Warehouse data",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.WarehouseCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created warehouse",
                        "schema": {
                            "$ref": "#/definitions/handler.WarehouseJSON"
                        }
                    },
                    "400": {
                        "description": "Invalid Data",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Warehouse already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        },
        "/api/v1/warehouses/{id}": {
            "get": {
                "description": "Retrieve a warehouse's details by its Id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouse"
                ],
                "summary": "Get warehouse by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Warehouse data",
                        "schema": {
                            "$ref": "#/definitions/handler.WarehouseJSON"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Warehouse not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a warehouse from the database by its ID",
                "tags": [
                    "Warehouse"
                ],
                "summary": "Delete warehouse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Warehouse not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            },
            "patch": {
                "description": "Modify an existing warehouse's data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouse"
                ],
                "summary": "Update warehouse details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated warehouse data",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.WarehousePatchUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated warehouse",
                        "schema": {
                            "$ref": "#/definitions/handler.WarehouseJSON"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format\" or \"Invalid Data",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "404": {
                        "description": "Warehouse not found",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "409": {
                        "description": "Warehouse already exists",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resterr.RestErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.LocalityPostJSON": {
            "type": "object",
            "properties": {
                "country_name": {
                    "type": "string"
                },
                "locality_id": {
                    "type": "integer"
                },
                "locality_name": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                }
            }
        },
        "handler.PurchaseOrderCreateRequest": {
            "type": "object",
            "properties": {
                "buyer_id": {
                    "type": "integer"
                },
                "order_date": {
                    "type": "string"
                },
                "order_number": {
                    "type": "string"
                },
                "product_record_id": {
                    "type": "integer"
                },
                "tracking_code": {
                    "type": "string"
                }
            }
        },
        "handler.PurchaseOrderJSON": {
            "type": "object",
            "properties": {
                "buyer_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "order_date": {
                    "type": "string"
                },
                "order_number": {
                    "type": "string"
                },
                "product_record_id": {
                    "type": "integer"
                },
                "tracking_code": {
                    "type": "string"
                }
            }
        },
        "handler.RequestProductBatchJSON": {
            "type": "object",
            "properties": {
                "batch_number": {
                    "type": "integer"
                },
                "current_quantity": {
                    "type": "integer"
                },
                "current_temperature": {
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "initial_quantity": {
                    "type": "integer"
                },
                "manufacturing_date": {
                    "type": "string"
                },
                "manufacturing_hour": {
                    "type": "integer"
                },
                "minumum_temperature": {
                    "type": "number"
                },
                "product_id": {
                    "type": "integer"
                },
                "section_id": {
                    "type": "integer"
                }
            }
        },
        "handler.RequestSectionJSON": {
            "type": "object",
            "properties": {
                "current_capacity": {
                    "type": "integer"
                },
                "current_temperature": {
                    "type": "number"
                },
                "maximum_capacity": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "number"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "section_number": {
                    "type": "integer"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "handler.ResponseReportProd": {
            "type": "object",
            "properties": {
                "products_count": {
                    "type": "integer"
                },
                "section_id": {
                    "type": "integer"
                },
                "section_number": {
                    "type": "integer"
                }
            }
        },
        "handler.SellersGetJSON": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cid": {
                    "type": "integer"
                },
                "company_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "locality_id": {
                    "type": "integer"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "handler.SellersPostJSON": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cid": {
                    "type": "integer"
                },
                "company_name": {
                    "type": "string"
                },
                "locality_id": {
                    "type": "integer"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "handler.SellersUpdateJSON": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cid": {
                    "type": "integer"
                },
                "company_name": {
                    "type": "string"
                },
                "locality_id": {
                    "type": "integer"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "handler.WarehouseCreateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "number"
                },
                "telephone": {
                    "type": "string"
                },
                "warehouse_code": {
                    "type": "string"
                }
            }
        },
        "handler.WarehouseJSON": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "number"
                },
                "telephone": {
                    "type": "string"
                },
                "warehouse_code": {
                    "type": "string"
                }
            }
        },
        "internal.Buyer": {
            "type": "object",
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "internal.BuyerPatch": {
            "type": "object",
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "internal.Carries": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "locality_id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "internal.Employee": {
            "type": "object",
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "internal.InboundOrders": {
            "type": "object",
            "properties": {
                "employee_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "order_date": {
                    "type": "string"
                },
                "order_number": {
                    "type": "string"
                },
                "product_batch_id": {
                    "type": "integer"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "internal.Product": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "expiration_rate": {
                    "type": "number"
                },
                "freezing_rate": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "length": {
                    "type": "number"
                },
                "net_weight": {
                    "type": "number"
                },
                "product_code": {
                    "type": "string"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "recommended_freezing_temperature": {
                    "type": "number"
                },
                "seller_id": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "internal.ProductRecords": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "last_update_date": {
                    "type": "string"
                },
                "product_id": {
                    "type": "integer"
                },
                "purchase_price": {
                    "type": "number"
                },
                "sale_price": {
                    "type": "number"
                }
            }
        },
        "internal.Section": {
            "type": "object",
            "properties": {
                "current_capacity": {
                    "type": "integer"
                },
                "current_temperature": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "maximum_capacity": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "number"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "section_number": {
                    "type": "integer"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "internal.WarehousePatchUpdate": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "number"
                },
                "telephone": {
                    "type": "string"
                },
                "warehouse_code": {
                    "type": "string"
                }
            }
        },
        "resterr.Causes": {
            "description": "Structure representing the causes of an error.",
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field associated with the error cause.\n@json\n@jsonTag field",
                    "type": "string",
                    "example": "name"
                },
                "message": {
                    "description": "Error message describing the cause.\n@json\n@jsonTag message",
                    "type": "string",
                    "example": "name is required"
                }
            }
        },
        "resterr.RestErr": {
            "description": "Structure for describing why the error occurred",
            "type": "object",
            "properties": {
                "causes": {
                    "description": "Error causes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resterr.Causes"
                    }
                },
                "code": {
                    "description": "Error code.",
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "description": "Error description.",
                    "type": "string",
                    "example": "internal_server_error"
                },
                "message": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "error trying to process request"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Meli Fresh Products API",
	Description:      "API for managing fresh products and orders",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
